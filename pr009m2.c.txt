#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#define BYTES1 103
#define BYTES2 92

int main() {
 int fd1[2], fd2[2], result;
 size_t size;
 char resstring1[BYTES1], resstring2[BYTES2];
 //Создаём два пайпа
 if((pipe(fd1) < 0)||(pipe(fd2)<0))  {
  printf("Не удалось создать пайп\n");
  exit(-1);
 }
 //Порождаем дочерний процесс
 result = fork();
 if(result < 0) {
  printf("Не удаллось создать дочерний процесс \n");
  exit(-1);
 }
 else if(result > 0) {
  //Находимся в процессе-родителе
  //Закрываем входной поток у пайп1 и выходной поток у пайп2
  if ((close(fd1[0])<0)|| close (fd2[1]<0)) {
   printf("не удалось закрыть выходной ил выходной поток\n");
   exit(-1);
  }
  //Записываем строку для дочернего процесса
  size = write(fd1[1], "Информация для дочернего процесса от процесса родителя", BYTES1);
  if(size != BYTES1) {
   printf("не удалось записать строку целиком\n");
   exit(-1);
  }
  printf("Строкка для дочернего процесса записана в пайп1\n");
  //Закрываем выходной поток для пайп1
  if (close(fd1[1])<0) {
   printf("не удалось закрыть выходной поток\n");
   exit(-1);
  }
  printf("Сообщение от ребёнка: %s\n", resstring2);
  size = read(fd2[0], resstring2, BYTES2);
                  if(size < 0) {
     printf("Произошла ощибка при чтении из пайпа\n");
     exit(-1);
    } 
   printf("Сообщение от ребёнка: %s\n", resstring2);
   if(close(fd2[0])<0) { 
    printf("Не удалось закрыть входной поток\n");
    exit(-1);
   }

   printf("Рдительский процесс завершил работу\n");
 } 
 else {
  if((close(fd1[1])<0)|| (close(fd2[0])<0)) {
   printf("Не удалось закрыть выходной или выходной поток\n");
   exit(-1);
  }
  printf("Процесс ребёнок начинает чтение строки из пайп1 ...\n");
  size = read(fd1[0], resstring1, BYTES1);
  if(size < 0) {
   printf("Произошда ощибка при чтении из пайпа\n");
   exit(-1);
  }
 printf("Сообщение от родитея: %s\n", resstring1);
 if(close(fd1[0])<0) {
  printf("Не удалось закрыть входной поток\n");
  exit(-1); 
  }
 printf("Процесс ребёнок начинает записьстроки пайп2 ...\n");
 size = write(fd2[1], "Информация для родительскиго процесса от ребёнка", BYTES2);
 if(size != BYTES2) {
  printf("Дочернему процессу не удалось записать строку а пайп2\n");
  exit(-1);
 }
 printf("Строка записана процессом-рбёном в пайп2\n");
 if(close(fd2[1])<0) {
  printf("Не удалось закрыть входной потокдля дочернего процесса\n");
  exit(-1);
 }
 printf("Процесс-ребёнок завершил работу\n"); 

 }
 return 0;
}
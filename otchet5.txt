Создание программы, где процесс родитель и процесс ребенок выполняют различные действия

Исходный код программы:
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdlib.h>
int main() {
        pid_t prid, parprid;
        int a = 0, c;
        prid = getpid();
        parprid = getppid() ;
        printf ("До выполнения fork() :\n");
        printf("Ид. текущего процесса: %d\n", prid);
        printf("Ид. родительского процесса: %d\n", parprid);
        printf("Начальное значение переменной а: %d", a);
        c = fork();
        if(c<0)  {
                printf("Ошибка привызове fork()");
                exit(-1) ;
        }
        else if (c==0) {
                printf("Выполнентие дочернего процесса");
                a = a+1 ;
                prid = getpid();
                parprid = getppid() ;
                printf ("Поесла выполнения fork() :\n");
                printf("Ид. текущего процесса: %d\n", prid);
                printf("Ид. родительского процесса: %d\n", parprid);
                printf("Зачальное значение переменной а: %d\n", a);
        }
        else {
             printf("Выполнение родительского процесса, порожден процесс c ид. %d\n", c);
             a = a+1000;
             prid = getpid();
             parprid = getppid();
             printf("После выполнение fork() для родительсого процесса:\n");
             printf("Ид. текущего процесса : %d\nИд родительского процесса: %d\n" , prid, parprid);
             printf("Значение переменной a: %d\n", a);
        }
        return 0;
}
Результат выполнения программы:
До выполнения fork() :
Ид. текущего процесса: 13171
Ид. родительского процесса: 13028
Начальное значение переменной а: 0Выполнение родительского процесса, порожден процесс c ид. 13172
После выполнение fork() для родительсого процесса:
Ид. текущего процесса : 13171
Ид родительского процесса: 13028
Значение переменной a: 1000
Начальное значение переменной а: 0Выполнентие дочернего процессаПоесла выполнения fork() :
Ид. текущего процесса: 13172
Ид. родительского процесса: 13171
Зачальное значение переменной а: 1

Выводы:
Переменная а в родительском и в лрчернем процессе независемы друг от друга, так как раплогагаются в разном адресном простанстве
Перменные, гле хранятся идентфикатры  родительского  и дочернего процессов таакже независимы друг от друга
Родительский процесс получает в качестве значения, возвращаемого системным вызовом fork() идентифификатор своео дочернего процесса
 Дочерний процесс получает значение 0, возвращаемое системным вызовом fork()
